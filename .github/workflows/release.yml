name: Release
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  precache-vcpkg:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}\vcpkg_installed
          key: ${{runner.os}}-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg
        id: prepare-vcpkg
        run: |
          ${{github.workspace}}\vcpkg\bootstrap-vcpkg.bat
          ${{github.workspace}}\vcpkg\vcpkg install --triplet x64-windows --clean-after-build

  build-windows:
    runs-on: windows-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Extract version
        id: meta
        run: |
          echo "version=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "version_short=${GITHUB_REF##*/v}" >> $GITHUB_ENV

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}\vcpkg_installed
          key: ${{runner.os}}-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg
        id: prepare-vcpkg
        run: |
          ${{github.workspace}}\vcpkg\bootstrap-vcpkg.bat
          ${{github.workspace}}\vcpkg\vcpkg install --triplet x64-windows --clean-after-build

      - name: CMake
        run: |
          cmake -S . -B ${{github.workspace}}\builds\build-r -DCMAKE_BUILD_TYPE=Release -DATLASVERSION='${{env.version_short}}' -DCMAKE_TOOLCHAIN_FILE='vcpkg/scripts/buildsystems/vcpkg.cmake'
          cmake -S . -B ${{github.workspace}}\builds\build-d -DCMAKE_BUILD_TYPE=Debug -DATLASVERSION='${{env.version_short}}' -DATLAS_BUILD_TESTS=1 -DCMAKE_TOOLCHAIN_FILE='vcpkg/scripts/buildsystems/vcpkg.cmake'

      - name: Build
        run: | 
          cmake --build ${{github.workspace}}\builds\build-r -j4
          cmake --build ${{github.workspace}}\builds\build-d -j4

      - name: Package
        run: |
          cd ${{github.workspace}}
          mkdir Atlas-Release
          mkdir Atlas-Debug
          move ${{github.workspace}}\builds\build-r\bin\* ${{github.workspace}}\Atlas-GameManager-Release\
          move ${{github.workspace}}\builds\build-d\bin\* ${{github.workspace}}\Atlas-GameManager-Debug\
          7z.exe a -tzip -mm=Deflate -mx=5 ${{github.workspace}}\Atlas-GameManager-Windows.zip ${{github.workspace}}\Atlas-GameManager-Release
          7z.exe a -tzip -mm=Deflate -mx=5 ${{github.workspace}}\Atlas-GameManager-Windows-Debug.zip ${{github.workspace}}\Atlas-GameManager-Debug
          

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Windows-Extract
          path: ${{github.workspace}}\Atlas-GameManager-Windows.zip
          if-no-files-found: error
          retention-days: 2

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Windows-Extract-Debug
          path: ${{github.workspace}}\Atlas-GameManager-Windows-Debug.zip
          if-no-files-found: error
          retention-days: 2

  create-release:
    name: Release
    runs-on: ubuntu-20.04
    needs: build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get artifacts
        uses: actions/download-artifact@v3

      - name: Extract version
        id: meta
        run: |
          echo "version=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "version_short=${GITHUB_REF##*/v}" >> $GITHUB_ENV

      - name: Rename
        run: |
          mkdir windows
          mv Windows-Extract/Atlas-GameManager-Windows.zip Atlas-GameManager-${{ env.version_short }}-windows.zip
          mv Windows-Extract-Debug/Atlas-GameManager-Windows-Debug.zip Atlas-GameManager-${{ env.version_short }}-Debug-windows.zip

      - name: Upload
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Atlas-GameManager-${{env.version_short}}-windows.zip
            Atlas-GameManager-${{env.version_short}}-Debug-windows.zip
          

