name: "Atlas build"
description: "Build Atlas"

inputs:
  build-release:
    description: "Builds release"
    required: false
    default: 'true'
  build-debug:
    description: "Build debug"
    required: false
    default: 'false'
  build-tests:
    description: "Build tests"
    required: false
    default: 'false'
  build-atlas:
    description: "Build atlas"
    required: false
    default: 'true'
  version-string:
    description: "Version string"
    required: false
    default: '0.0.0'

runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/setupgcc

    - name: Cache sqlite
      id: cache-sqlite
      uses: actions/cache@v3
      with:
        path: '${{github.workspace}}\sqlite'
        key: ${{runner.os}}-sqlite-3400100

    - name: Download SQLITE-Amalgamation
      if: steps.cache-sqlite.outputs.cache-hit != 'true'
      uses: carlosperate/download-file-action@v2.0.0
      id: download_amalgamation
      with:
        file-url: https://www.sqlite.org/2022/sqlite-amalgamation-3400100.zip
        file-name: sqlite-amalg.zip
        location: '${{github.workspace}}\sqlite'

    - name: Download SQLITE-dll
      if: steps.cache-sqlite.outputs.cache-hit != 'true'
      uses: carlosperate/download-file-action@v2.0.0
      id: download_dll
      with:
        file-url: https://www.sqlite.org/2022/sqlite-dll-win64-x64-3400100.zip
        file-name: sqlite-dll.zip
        location: '${{github.workspace}}\sqlite'

    - name: Prepare SQLITE
      shell: powershell
      if: steps.cache-sqlite.outputs.cache-hit != 'true'
      run: |
        cd sqlite
        7z x sqlite-amalg.zip -o"./include"
        cd include/sqlite-amalgamation-3400100
        move * ..
        cd ../..
        7z x sqlite-dll.zip -o"./lib"
        cd ..

    - name: Install Qt
      if: steps.cache-qt.outputs.cache-hit != 'true'
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.4.*
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        cache: true
        modules: 'qtimageformats'

    - name: CMake Release
      shell: powershell
      if: ${{inputs.build-release == 'true'}}
      run: cmake -S . -B ${{github.workspace}}\builds\build-r -DCMAKE_BUILD_TYPE=Debug -DATLASVERSION='${{inputs.version-string}}' -DSQL_PATH='${{github.workspace}}\sqlite' -G"MinGW Makefiles"

    - name: CMake Debug
      shell: powershell
      if: ${{inputs.build-debug == 'true'}}
      run: cmake -S . -B ${{github.workspace}}\builds\build-d -DCMAKE_BUILD_TYPE=Debug -DATLASVERSION='${{inputs.version_short}}' -DSQL_PATH='${{github.workspace}}\sqlite' -G"MinGW Makefiles"

    - name: Prepare msbuild for tracy
      uses: microsoft/setup-msbuild@v1

    - name: Cache tracy vcpkg
      uses: actions/cache@v2
      id: cache-tracy-vcpkg
      with:
        # path is in AppData\Local
        path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: ${{runner.os}}-tracy-vcpkg

    - name: Prepare vcpkg for tracy
      shell: powershell
      if: ${{inputs.build-debug == 'true' && steps.cache-tracy-vcpkg.outputs.cache-hit != 'false'}}
      run: |
        cd ${{github.workspace}}\dependencies\tracy\
        vcpkg install --triplet x64-windows-static

    - name: Prepare tracy
      shell: powershell
      if: ${{inputs.build-debug == 'true'}}
      run: |
        cd ${{github.workspace}}\dependencies\tracy\capture\build\win32
        msbuild capture.vcxproj /p:configuration=release /p:platform=x64
        mkdir ${{github.workspace}}\builds\build-d
        xcopy /y /v ${{github.workspace}}\dependencies\tracy\capture\build\win32 ${{github.workspace}}\builds\build-d\tracy
        cd ${{github.workspace}}

    - name: Build Target Atlas Release
      shell: powershell
      if: ${{inputs.build-release == 'true' && inputs.build-atlas == 'false'}}
      run: cmake --build ${{github.workspace}}\builds\build-r -j8 --target Atlas

    - name: Build Target Atlas Debug
      shell: powershell
      if: ${{inputs.build-debug == 'true' && inputs.build-atlas == 'true'}}
      run: cmake --build ${{github.workspace}}\builds\build-d -j8 --target Atlas

    - name: Build Target AtlasTESTS Release
      shell: powershell
      if: ${{inputs.build-release == 'true' && inputs.build-tests == 'true'}}
      run: cmake --build ${{github.workspace}}\builds\build-r -j8 --target AtlasTESTS

    - name: Build Target AtlasTESTS Debug
      shell: powershell
      if: ${{inputs.build-debug == 'true' && inputs.build-tests == 'true'}}
      run: cmake --build ${{github.workspace}}\builds\build-d -j8 --target AtlasTESTS